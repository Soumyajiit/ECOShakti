{"ast":null,"code":"var _excluded = [\"children\"];\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nimport * as React from 'react';\nimport { createContext, useContext, useEffect, useRef } from 'react';\nimport { addErrorBar, removeErrorBar, replaceErrorBar } from '../state/errorBarSlice';\nimport { useAppDispatch } from '../state/hooks';\nimport { useGraphicalItemId } from './RegisterGraphicalItemId';\nvar initialContextState = {\n  data: [],\n  xAxisId: 'xAxis-0',\n  yAxisId: 'yAxis-0',\n  dataPointFormatter: () => ({\n    x: 0,\n    y: 0,\n    value: 0\n  }),\n  errorBarOffset: 0\n};\nvar ErrorBarContext = /*#__PURE__*/createContext(initialContextState);\nexport function SetErrorBarContext(props) {\n  var {\n      children\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  return /*#__PURE__*/React.createElement(ErrorBarContext.Provider, {\n    value: rest\n  }, children);\n}\nexport var useErrorBarContext = () => useContext(ErrorBarContext);\nexport function ReportErrorBarSettings(props) {\n  var dispatch = useAppDispatch();\n  var graphicalItemId = useGraphicalItemId();\n  var prevPropsRef = useRef(null);\n  useEffect(() => {\n    if (graphicalItemId == null) {\n      // ErrorBar outside a graphical item context does not do anything.\n      return;\n    }\n    if (prevPropsRef.current === null) {\n      dispatch(addErrorBar({\n        itemId: graphicalItemId,\n        errorBar: props\n      }));\n    } else if (prevPropsRef.current !== props) {\n      dispatch(replaceErrorBar({\n        itemId: graphicalItemId,\n        prev: prevPropsRef.current,\n        next: props\n      }));\n    }\n    prevPropsRef.current = props;\n  }, [dispatch, graphicalItemId, props]);\n  useEffect(() => {\n    return () => {\n      if (prevPropsRef.current != null) {\n        dispatch(removeErrorBar({\n          itemId: graphicalItemId,\n          errorBar: prevPropsRef.current\n        }));\n        prevPropsRef.current = null;\n      }\n    };\n  }, [dispatch, graphicalItemId]);\n  return null;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}