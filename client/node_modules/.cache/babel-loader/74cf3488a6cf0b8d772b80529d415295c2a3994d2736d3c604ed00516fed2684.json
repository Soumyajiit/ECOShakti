{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport { noop } from 'es-toolkit';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\nimport { useAnimationManager } from './useAnimationManager';\nimport { getTransitionVal } from './util';\nvar defaultProps = {\n  begin: 0,\n  duration: 1000,\n  easing: 'ease',\n  isActive: true,\n  canBegin: true,\n  onAnimationEnd: () => {},\n  onAnimationStart: () => {}\n};\nexport function CSSTransitionAnimate(outsideProps) {\n  var props = resolveDefaultProps(outsideProps, defaultProps);\n  var {\n    animationId,\n    from,\n    to,\n    attributeName,\n    isActive,\n    canBegin,\n    duration,\n    easing,\n    begin,\n    onAnimationEnd,\n    onAnimationStart: onAnimationStartFromProps,\n    children\n  } = props;\n  var animationManager = useAnimationManager(animationId + attributeName, props.animationManager);\n  var [style, setStyle] = useState(() => {\n    if (!isActive) {\n      return to;\n    }\n    return from;\n  });\n  var initialized = useRef(false);\n  var onAnimationStart = useCallback(() => {\n    setStyle(from);\n    onAnimationStartFromProps();\n  }, [from, onAnimationStartFromProps]);\n  useEffect(() => {\n    if (!isActive || !canBegin) {\n      return noop;\n    }\n    initialized.current = true;\n    var unsubscribe = animationManager.subscribe(setStyle);\n    animationManager.start([onAnimationStart, begin, to, duration, onAnimationEnd]);\n    return () => {\n      animationManager.stop();\n      if (unsubscribe) {\n        unsubscribe();\n      }\n      onAnimationEnd();\n    };\n  }, [isActive, canBegin, duration, easing, begin, onAnimationStart, onAnimationEnd, animationManager, to, from]);\n  if (!isActive) {\n    /*\n     * With isActive=false, the component always renders with the final style, immediately,\n     * and ignores all other props.\n     * Also there is no transition applied.\n     */\n    return children({\n      [attributeName]: to\n    });\n  }\n  if (!canBegin) {\n    return children({\n      [attributeName]: from\n    });\n  }\n  if (initialized.current) {\n    var transition = getTransitionVal([attributeName], duration, easing);\n    return children({\n      transition,\n      [attributeName]: style\n    });\n  }\n  return children({\n    [attributeName]: from\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}