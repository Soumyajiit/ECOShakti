{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { createSelector } from 'reselect';\nimport { selectLegendSettings, selectLegendSize } from './legendSelectors';\nimport { appendOffsetOfLegend } from '../../util/ChartUtils';\nimport { selectChartHeight, selectChartWidth, selectMargin } from './containerSelectors';\nimport { selectAllXAxes, selectAllYAxes } from './selectAllAxes';\nimport { DEFAULT_Y_AXIS_WIDTH } from '../../util/Constants';\nexport var selectBrushHeight = state => state.brush.height;\nfunction selectLeftAxesOffset(state) {\n  var yAxes = selectAllYAxes(state);\n  return yAxes.reduce((result, entry) => {\n    if (entry.orientation === 'left' && !entry.mirror && !entry.hide) {\n      var width = typeof entry.width === 'number' ? entry.width : DEFAULT_Y_AXIS_WIDTH;\n      return result + width;\n    }\n    return result;\n  }, 0);\n}\nfunction selectRightAxesOffset(state) {\n  var yAxes = selectAllYAxes(state);\n  return yAxes.reduce((result, entry) => {\n    if (entry.orientation === 'right' && !entry.mirror && !entry.hide) {\n      var width = typeof entry.width === 'number' ? entry.width : DEFAULT_Y_AXIS_WIDTH;\n      return result + width;\n    }\n    return result;\n  }, 0);\n}\nfunction selectTopAxesOffset(state) {\n  var xAxes = selectAllXAxes(state);\n  return xAxes.reduce((result, entry) => {\n    if (entry.orientation === 'top' && !entry.mirror && !entry.hide) {\n      return result + entry.height;\n    }\n    return result;\n  }, 0);\n}\nfunction selectBottomAxesOffset(state) {\n  var xAxes = selectAllXAxes(state);\n  return xAxes.reduce((result, entry) => {\n    if (entry.orientation === 'bottom' && !entry.mirror && !entry.hide) {\n      return result + entry.height;\n    }\n    return result;\n  }, 0);\n}\n\n/**\n * For internal use only.\n *\n * @param root state\n * @return ChartOffsetInternal\n */\nexport var selectChartOffsetInternal = createSelector([selectChartWidth, selectChartHeight, selectMargin, selectBrushHeight, selectLeftAxesOffset, selectRightAxesOffset, selectTopAxesOffset, selectBottomAxesOffset, selectLegendSettings, selectLegendSize], (chartWidth, chartHeight, margin, brushHeight, leftAxesOffset, rightAxesOffset, topAxesOffset, bottomAxesOffset, legendSettings, legendSize) => {\n  var offsetH = {\n    left: (margin.left || 0) + leftAxesOffset,\n    right: (margin.right || 0) + rightAxesOffset\n  };\n  var offsetV = {\n    top: (margin.top || 0) + topAxesOffset,\n    bottom: (margin.bottom || 0) + bottomAxesOffset\n  };\n  var offset = _objectSpread(_objectSpread({}, offsetV), offsetH);\n  var brushBottom = offset.bottom;\n  offset.bottom += brushHeight;\n  offset = appendOffsetOfLegend(offset, legendSettings, legendSize);\n  var offsetWidth = chartWidth - offset.left - offset.right;\n  var offsetHeight = chartHeight - offset.top - offset.bottom;\n  return _objectSpread(_objectSpread({\n    brushBottom\n  }, offset), {}, {\n    // never return negative values for height and width\n    width: Math.max(offsetWidth, 0),\n    height: Math.max(offsetHeight, 0)\n  });\n});\nexport var selectChartViewBox = createSelector(selectChartOffsetInternal, offset => ({\n  x: offset.left,\n  y: offset.top,\n  width: offset.width,\n  height: offset.height\n}));\nexport var selectAxisViewBox = createSelector(selectChartWidth, selectChartHeight, (width, height) => ({\n  x: 0,\n  y: 0,\n  width,\n  height\n}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}